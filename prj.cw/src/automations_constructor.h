/*!
\file
\brief Заголовочный файл для класса Автоматизация

Данный файл полностью подключает библиотеку Automations Constructor
*/

#pragma once

#include "modules/choreograph/Choreograph.h" as ch;
#include <string>
#include <vector>
#include <unordered_map>
#include <stdexcept>
#include <iostream>
#include <fstream>



namespace au
{

	/// <summary>
	/// \brief Главный класс библиотеки Automations Constructor
	/// 
	/// \details Класс автоматизации представляет собой необходимый минимальный набор 
	/// полей и методов для хранения и работы с сущностью Автоматизации.
	/// Под автоматизацией понимается кусочно-заданнная
	/// нормализованная (принимающая значения по оси Y от 0 до 1 вкл.)
	/// математическая функция с разрывами (напоминает пилообразную функцию). 
	/// Эта функция в свою очередь состоит из математических функций 
	/// сглаживания Роберта Пеннера, "склеенных" друг за другом в строку. 
	/// Представим горизонтальную временную шкалу t. Тогда каждая 
	/// из составных функций всегда начинается в координате (t,0) и заканчивается 
	/// в (t,1) где t это какой-то момент времени (таймкод)
	/// <summary>
	
	class Automation
	{
		private:
			

			/// \brief Динамический вектор, хранящий таймкоды каждой точки.
			/// \details Каждая точка задает разрыв в кусочно-заданной результирующей
			/// функции. Грубо говоря таймкоды - это те значения t, где 
			/// стыкуются составные функции.
			/// Первый таймкод всегда будет находиться в нуле (начало отсчета)
			/// Размер должен совпадать с размером eases

			std::vector<float> timecodes = { 0 };


			/// \brief Динамический вектор хранящий функции сглаживания из библиотеки choreograph
			/// \details Функция сглаживания принимает и возвращает float (на вход подается 
			/// момент времени t, на выход значение функции сглаживания от 0 до 1 в этот момент времени) 
			/// Пример хранимой единицы: choreograph::EaseInOutQuad()
			/// Размер должен совпадать с размером timecodes

			std::vector<std::function<float(float)>> eases;


		public:

			/// \brief Сеттер таймкодов в автоматизацию
			/// \details Таймкоды вносятся в вектор timecodes
			/// \param time Таймкод
			void setTimecode (float time);


			/// \brief Сеттер функций сглаживаний в автоматизацию
			/// \details Функции сглаживания вносятся в вектор eases
			/// \param func Функция сглаживания из библиотеки choreograph
			
			void setEase(std::function<float(float)> func);
			

			/// \brief Геттер таймкодов автоматизации
			/// \param i Индекс требуемого таймкода
			/// \return i-тый таймкод из вектора timecodes
			
			float getTimecode(int i);


			/// \brief Геттер функций сглаживания автоматизации
			/// \param i Индекс требуемой функции сглаживания
			/// \return i-тую функцию сглаживания из вектора eases
			
			std::function<float(float)> getEase(int i);


			/// \brief Геттер количества точек в автоматизации
			/// \details Количество точек (считая 0 как первую) равно количеству разрывов в итоговой функции
			/// \return количество разрывов в итоговой функции (количество ключевых таймкодов в последовательности)
			
			int getAmountOfPoints();


			/// \brief Метод чтения текстового файла параметров для создания последовательности
			/// \details Файл параметров содержит перечисление всех таймкодов в порядке возрастания (прим. "5 7 14"),
			/// а также перечисление всех фукнций сглаживания (прим. "EaseInOutQuad EaseOutSine EaseInQuint")
			/// для создания последовательности по этим данным.
			/// Указание параметров в файле настроек может быть произведено в произвольном порядке.
			/// Параметры записано в векторы последовательно, главное чтобы количество перечисленных параметров 
			/// функций сглаживания соответсвовало количеству перечисленных параметров таймкодов.
			/// \param filePath Путь из папки проекта до файла настроек
						
			void inputFromFile(std::string filePath);

			
			/// \brief Метод создания последовательности на основе автоматизации
			/// \details Конвертация параметров созданной автоматизации в
			///		последовательность (choreograph::Sequence<float>), состоящую из фраз (choreograph::Phrase<float>).
			/// Правильно построенную последовательность уже можно считать готовой единицей данных для работы с ними.
			/// Используемые сущности из библиотеки choreograph:
			///		ch::Sequence, ch::Phrase (ch::RampTo, ch::Hold как виды Phrase)
			/// Описание каждой из них есть в библиотеке choreograph
			/// \return одно из возможных итоговых представлений автоматизации в формате ch::Sequence
			/// 
			/// 
		
			ch::Sequence<float> makeSequence();

			
			/// \brief Преобразование текстового ввода в функции сглаживания из библиотеки choreograph через ключ-значение
			/// \details Для преобразования используется std::unordered_map со значениями 
			/// для возврата нужных функций, который находится в реализации метода в файле .cpp
			/// \param ease Строка, с названием функции сглаживания
			/// \return функцию сглаживания из библиотеки choreograph
			/// 
			std::function<float(float)> inputFormatEase(std::string ease);
	};
}